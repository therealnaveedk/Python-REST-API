Heroku:
 - online service that allows us to put out api there for others to use.
 - scaling, and making it more powerful (have to pay)
 - extremely popular way of deploying web services such as REST APIS
 - Heroku is similar to AWS.

 - So its a webservice that runs your code and allows others to access it
 - give it flask apps and it will run them and gives access to other people
 - makes them available for others to interact with
 - allowing this (a url other people can use) is hosting
 - heroku can host flask apps and many other things (ruby, go etc)

 How does heroku work?
  - Heroku works with dynos.
  - A dyno is very similar to a server
  - server: somehting you place code on, run code, and make available to others
  - dyno does the same thing
  - dyno is heroku's version of a server, however it is not quite a computer
  - The dyno is a VIRTUAL MACHINE
  - when you application, it has only control of the vm created for that dyno
  - limitations: cant run things simultaneously
       - ex: we want to run something simultaneously alongside our flask app
             is a way of improving app performance, by adding a caching layer.
             we cannot do this in heroku
  - However we can tell heroku to run our python app and also we will have to
    tell it to run something called uWSGI
  - uWSGI is a way of serving your flask application
  - Although the Flask application has a serving layer (thats how we access it
    using postman or our webserver) it is not the best and also it is limited in
    waht it can interact with.
  - By running uWSGI, which is another Python library, on top, we make our flask
    app more flexible
  - Dyno will run Python app, the flask app (has flask-restful), flask-sqlalchemy etc),
    and uWSGI (this library will interact with flask app in order to make it available
    for others to use)
  - Imagine big box, which is the Heroku App and that will be composed of a single
    dyno (contains python and uwsgi). heroku app can have other things too, like config properties (what db to use, etc).
    Heroku can run many other dynos at the same time. dynos can share data between each other
    More dynos make app faster and more available (have to pay for tht)
   - Heroku is great for security cuz it enables automatically ssl FOR US (Secure Sockets Layer)
   - SSL allows communication between the client (you) and the server (Heroku)
     to be encrypted. so all of your rest api users will see encrypted communciation going to server
     so its very useful when sending sensitive information (such as passwords) so no one can snoop

Conclusion:
   - Heroku: a distributed hosting service (each dyno is separate from others)
   - Each server is a dyno and it runs your applicaation
   - free tier gives you 1 dyno but limited running hours (goes to sleep now and then)
   - SSL gives it a good security profile

.gitignore:
 - contents of this files are patterns which are going to be ignored when it comes
 - to adding files to git
  - ex: .DS_Store, __pyacache__/ folders (these are caches of compiled python code),
        compiled python code so *.pyc files


Heroku again:
 - auto deployment means that whenever you push a commit to remote branch it will automatically go to heroku.
 - kinda risky cuz if you have bugs in your code, they will get deployed too
 - here we used manual deploy (current branch)
 - may fail so we have to add some stuff to make the app run in heroku

 1) we need a way to tell heroku what python version we are using and that we are
    using python, that is in the file called runtime.txt. it has to be called that
    and it contains python-3.6.4

 2) need a file to tell heroku how to install the libraries that we are using this app.
    that file is called requirements.txt (Again spelling is IMPORTANT)

 3) uWSGI is used to interact with our Flask App and make it available for others
    to go and access it (flask can do it as well but it aint as good.)
    uWSGI gives us things like more efficient multiprocess support, restarting
    processes if they hang up etcc. that is in requirements.txt as well
    (dont have to install it in your computer.) however if you are using pycharm
    and create requirements.txt in it and save it, it will tell you whether you
    want to install uwsgi and in your computer you dont have to install uwsgi
    (it will likely fail cuz u need a c compiler for it)

4) we need to create another file called uwsgi.ini (again spelling)
   it contains some configuration parameters for the uwsgi process to run our app

   it looks like this:

   //tagging it. the section
   [uwsgi]

   //these are config params.


   // here we are telling it what port to run on, this is heroku specific
   //it will read the port number from the heroku config
   http-socket = :$(PORT)

   //we will use the master process when we run uwsgi
   //essentially there will be a process controlling the other processes called
   //slave processes
   master = true

   // when a process terminates we will kill the uwsgi process just to free up the resources
   die-on-term = true

   // module we are running is the flask app.py we are running and that is inside a variable
   // called app (the latter app below)
   // so it will look up that variable and thats what its gonna run as a uwsgi application
   module = app:app

   //probably wont use it in heroku but might be interesting later on
   memory-report = true

5) we need a file called Procfile (again spelling.) that just contains what dyno
   we want to use in heroku
   There are specific types of dynos. the dyno is this file will connect to a
   HTTP port (ex: our app runs in port 5000) this dyno here is alos going to be
   listening on that port to receive incoming requests hence it is important that
   it is a dyno of type web

   // latter part of web is the process/application it will run
   // runs the uwsgi process with the uwsgi.ini file and that is then going to
   // load up the Python app and run that
   // so when we run this process with this config file, that is going to listen
   // in to the module in uwsgi.ini and run our app variable that contains app.py
   //and that will start our Flask app
   web: uwsgi uwsgi.ini


When you run app at this point, everything is good except you get an error from heroku
when you view it cuz this is a api and cant use a browser to view it. what occurs next
is the fix

1) install heroku command line (remember to quite terminal and then restart)
2_ heroku auth:login
3) heroku logs --app=python-stores-rest-api

we get an error, it returns 500, when it should return 404. upon further inspection
we seee that we have NameError: name 'db' is not defined

Why? Why is this not defined? i mean we have it in app.py, so why is not defined?

This is cuz we have it imported in the if statement at the bottm in app.py cuz
we want to avoid circular imports.

Now when we ran python3.6 app.py, app.py was main and hence ran without any issues

(the code under that if statemetn)
this code is executed when we directly execute app.py from python command line
python app.py and therefore this runs. however when we run this from uwsgi,
uwsgi is loading the app variable above app = Flask(__name__) and running it
itself. IT IS NOT RUNNING THE app.py file. so therefore this never runs and nor
does app.run but uwsgi runs the app for us so issue is we are not importing db
and hence it does not know it exists the solution is to have another file
(we called it run.py)

in run.py we also moved the decorator form app.py that creates the tables

also updated uwsgi.ini with the reference module = run:app (cuz we want to
execute run.py and not app.py) which is the same and will have access to the db
variable

Once these changes are placed, we should get a 404 not found! that means there was
no error, we didnt define a path for /, so now we go over to postman change the url
to this new url: https://python-stores-rest-api.herokuapp.com/
(the one in the error in address bar)


PostgreSQL:
 - we will use this in our app so that we dont lose the data when we deploy again
   or when dyno goes to sleep

1) add it to heroku as an add on, go to resources-> find more add ons
 limitation on heroku PostgreSQL with hobby dev (free) is 10000 rows (combined between all tables)

2) in heroku go to settings -> config variables -> reveal config vars
   copy this url. this db has been added as an environment variable.
   environment variable is something that the system/vm/heroku keeps track off
   so that machine is always going to know the value of this environment variable
   All we have to do is read that variable from the environment
3) import os is app.py (gives access to os environment variable)
   app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL','sqlite:///data.db')

4) in requirements.txt: add psycopg2
   psycopg2 is a popular python library used to interact with PostgreSQL
   sqlalchemy also uses it to communicate with PostgreSQL, even though we are NOT
   using it ourselves

5) then commit to git, manual deploy in heroku and u then when u test in postman
  its there

Working with Git and auto deploys:

   - can set auto deploys in heroku
   - whenever a commit arrives in master, it will deploy to github
   - so when you are working on new code, you dont want to work on the master branch
     cuz while added resource, code might break
  - so we create branch. ex: git branch feature/item-categories
  - make changes
  - git push --set-upstream origin feature/item-categories
  (Send this to origin remote repo and create this branch there. so both local
   and remote repos have this branch)
  - then test locally, and after you merge it
  - git checkout master
  - git merge feature/item-categories
  - once merged you push it over: git push origin master
  - once you do this, the auto deploy is triggered
  - so it is deployed after you push master, not the feature branch
  - once this is done you can do: git branch -d feature/item-categories
    and this branch is deleted
  - can create a production branch and enable auto deploys on it

Heroku limitations:
 - not the easiest before setup
 - not the easiest for storing data locally, improving performance, you cannot
   change many of the parameters in heroku cuz you dont own on the server on which
   your api is running

 - hence having your own server can be more helpful
